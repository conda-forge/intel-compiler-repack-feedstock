{% set version = "2025.1.0" %}
# work-around for https://github.com/conda/conda-build/issues/5443
{% set intel_build_number = "dummy" %}
{% set intel_build_number = "973" %}   # [linux]
{% set intel_build_number = "972" %}   # [win]

{% set oneccl_version = "2021.15.0" %}
{% set oneccl_build_number = "397" %}

{% set tbb_version_major = "2022" %}

{% set umf_version = "0.10.0" %}
{% set umf_build_number = "355" %}   # [linux]
{% set umf_build_number = "356" %}   # [win]

{% set intel_ch = "https://software.repos.intel.com/python/conda" %}

# use this if our build script changes and we need to increment beyond intel's version
{% set dst_build_number = '1' %}
{% set build_number = intel_build_number|int + dst_build_number|int %}

package:
  name: intel-compiler-repack
  version: {{ version }}

source:
  # Is there a better way to specify skipping the source if it does not exist? (so it matches 'skip: True' selectors)
  - url: {{ intel_ch }}/{{ target_platform }}/ifx_impl_{{ target_platform }}-{{ version }}-intel_{{ intel_build_number }}.conda  # [linux64 or win64]
    folder: ifx_impl_{{ target_platform }}  # [linux64 or win64]
    sha256: 2b47486328364711710de6b2605f16dc41f1bd0e9ca7f73925f4a1b3335fd4e3  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/ifx_{{ target_platform }}-{{ version }}-intel_{{ intel_build_number }}.conda  # [linux64 or win64]
    folder: ifx_{{ target_platform }}  # [linux64 or win64]
    sha256: 9d49ac80f6bc5b4840dcad8a1fa0485189be1563dc19b0451accf6c36de04ad4  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/intel-cmplr-lic-rt-{{ version }}-intel_{{ intel_build_number }}.conda
    folder: intel-cmplr-lic-rt
    sha256: 31ef4fcfdf8d473aca78332430981d845c73b0e0c85727256ba0ff5180387219  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/intel-cmplr-lib-rt-{{ version }}-intel_{{ intel_build_number }}.conda
    folder: intel-cmplr-lib-rt
    sha256: 8c82039d357bc636e4f8c57bd51360924f2d0f0f89a4ec175eb21e9d29c67358  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/intel-cmplr-lib-ur-{{ version }}-intel_{{ intel_build_number }}.conda
    folder: intel-cmplr-lib-ur
    sha256: 8c1520aeef86f4dc2a5fd27f50d2fd5e8667f98cb5381d4d3128e853d0341672  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/intel-sycl-rt-{{ version }}-intel_{{ intel_build_number }}.conda
    folder: intel-sycl-rt
    sha256: a9eddaa0bff1e7bc1158a2f51edc7d151c2e0e8aa1889fc8685abb960309c80f  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/intel-fortran-rt-{{ version }}-intel_{{ intel_build_number }}.conda
    folder: intel-fortran-rt
    sha256: 5f2b72276c6c6d4c159fbc93f25432ea8a217d07cc9bf7cb1ff297db4d4a0ef5  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/intel-opencl-rt-{{ version }}-intel_{{ intel_build_number }}.conda  # [linux64 or win64]
    folder: intel-opencl-rt  # [linux64 or win64]
    sha256: 29e1c459881dba7395d3e4ac3ad95ee59e5d0312821b5819778493391c2b90bd  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/dpcpp-cpp-rt-{{ version }}-intel_{{ intel_build_number }}.conda  # [not win32]
    folder: dpcpp-cpp-rt  # [not win32]
    sha256: 4fc84e70d2249d97461883b529311c9e8261c9d53cffeaa2df4bc2a77aba52a0  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/dpcpp_impl_{{ target_platform }}-{{ version }}-intel_{{ intel_build_number }}.conda  # [linux64 or win64]
    folder: dpcpp_impl_{{ target_platform }}  # [linux64 or win64]
    sha256: 316f4f0d5ff5747eae004913a1498ce946ff1e84d4927159136f3468d7d0cc53  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/dpcpp_{{ target_platform }}-{{ version }}-intel_{{ intel_build_number }}.conda  # [linux64 or win64]
    folder: dpcpp_{{ target_platform }}  # [linux64 or win64]
    sha256: 79205c134076987590129315aeab60d45968f1e62213ad2739dec19c87bcffad  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/oneccl-devel-{{ oneccl_version }}-intel_{{ oneccl_build_number }}.conda  # [linux64]
    folder: oneccl-devel  # [linux64]
    sha256: 23af1253724f2299abf67606e174ab75dbd2f6829f735deaf14897a919f4c3af  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/umf-{{ umf_version }}-intel_{{ umf_build_number }}.conda  # [linux64 or win64]
    folder: umf  # [linux64 or win64]
    sha256: 3363c4c77b35d8919206f37f5d5c1676c8f868c6689555760b31ededc938f9a3  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/compiler_shared-{{ version }}-intel_{{ intel_build_number }}.conda  # [linux64 or win64]
    folder: compiler_shared  # [linux64 or win64]
    sha256: 67ccc86fe050c75998cfc6456fc299fa9d0884acbbc3d11511a48519fead1c1f  # [linux64]

build:
  number: {{ build_number }}
  binary_relocation: False
  detect_binary_files_with_prefix: False
  skip: True                                  # [not (linux64 or win)]

outputs:
  - name: intel-cmplr-lic-rt
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      run_exports:
        # This is just a license file package, so let's pin it strict.
        - {{ pin_subpackage("intel-cmplr-lic-rt", exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      dev_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      summary: Intel End User License Agreement for Developer Tools
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-cmplr-lic-rt/info/licenses/license.txt
        - intel-cmplr-lic-rt/info/licenses/tpp.txt
      description: |
        Intel End User License Agreement for Developer Tools.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/licensing/compiler/*  # [unix]
        - dir %PREFIX%\licensing\compiler\*  # [win]

  - name: intel-cmplr-lib-rt
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      run_exports:
        # Pin to year for now, similar to MKL.
        - {{ pin_subpackage("intel-cmplr-lib-rt", max_pin="x") }}
    requirements:
      # Since it is repack, we do not need these packages in the build and host
      # sections. However it is limitation of conda-build to check for library
      # linking only for the packages that are presented in build and host and
      # have run_export section.
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - zlib
        # intel-cmplr-lic-rt is a license file, please do not remove.
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
      run:
        # intel-cmplr-lic-rt is a license file, please do not remove.
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top.html
      summary: Runtime for Intel® C++ Compiler Classic
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-cmplr-lib-rt/info/licenses/license.txt
        - intel-cmplr-lib-rt/info/licenses/tpp.txt
      description: |
        Runtime for Intel® C++ Compiler Classic.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/lib/*  # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]

  - name: intel-cmplr-lib-ur
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      ignore_run_exports_from:
        - level-zero-devel  # [linux]
      run_exports:
        # Pin to year for now, similar to MKL.
        - {{ pin_subpackage("intel-cmplr-lib-ur", max_pin="x") }}
    requirements:
      # Since it is repack, we do not need these packages in the build and host
      # sections. However it is limitation of conda-build to check for library
      # linking only for the packages that are presented in build and host and
      # have run_export section.
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - zlib
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # Pinning it on linux for now, because on windows it should be
        # distributed with driver and because of the specific of the system
        # level zero loader may be searched only in the system directories.
        # TODO: check if windows libraries may be loaded from conda environment.
        - level-zero-devel  # [linux]
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('umf', exact=True) }}
      run:
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('umf', exact=True) }}
      run_constrained:
        # Pinning it on linux for now, because on windows it should be
        # distributed with driver and because of the specific of the system
        # level zero loader may be searched only in the system directories.
        # TODO: check if windows libraries may be loaded from conda environment.
        - {{ pin_compatible("level-zero") }}     # [linux]
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top.html
      summary: Runtime for Intel® C++ Compiler Classic
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-cmplr-lib-ur/info/licenses/license.txt
        - intel-cmplr-lib-ur/info/licenses/tpp.txt
      description: |
        Runtime for Intel® C++ Compiler Classic.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/lib/*  # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]
        - test -f ${PREFIX}/lib/libur_loader.so  # [linux]

  - name: intel-sycl-rt
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      run_exports:
        # Pin to year for now, similar to MKL.
        - {{ pin_subpackage("intel-sycl-rt", max_pin="x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-ur', exact=True) }}
      run:
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-ur', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      dev_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      summary: Intel End User License Agreement for Developer Tools
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-sycl-rt/info/licenses/license.txt
        - intel-sycl-rt/info/licenses/tpp.txt
      description: |
        Intel End User License Agreement for Developer Tools.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/licensing/compiler/*  # [unix]
        - test -f ${PREFIX}/include/CL/sycl.hpp  # [unix]
        - test -f ${PREFIX}/include/sycl/sycl.hpp  # [unix]
        - dir %PREFIX%\licensing\compiler\*  # [win]

  - name: intel-fortran-rt
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      run_exports:
        # Pin to year for now, similar to MKL.
        - {{ pin_subpackage("intel-fortran-rt", max_pin="x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
        - patchelf                 # [linux]
      host:
        - mpich                    # [linux]
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
      run:
        - _openmp_mutex * *_llvm   # [linux]
        - llvm-openmp              # [not linux]
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/fortran-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/fortran-compiler-oneapi-dev-guide-and-reference/top.html
      summary: Runtime for Intel® Fortran Compiler Classic and Intel® Fortran Compiler (Beta)
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-fortran-rt/info/licenses/license.txt
        - intel-fortran-rt/info/licenses/tpp.txt
      description: |
        Runtime for Intel® Fortran Compiler Classic and Intel® Fortran Compiler (Beta).
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/lib/*  # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]

  - name: intel-opencl-rt
    script: opencl-rt-build.sh   # [unix]
    script: opencl-rt-bld.bat  # [win]
    build:
      skip: True  # [win32]
      binary_relocation: False   # [win]
      run_exports:
        # Pin to year for now, similar to MKL.
        - {{ pin_subpackage("intel-opencl-rt", max_pin="x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
        - patchelf               # [linux]
        - python *  # [win]
      host:
        # We don't dynamically link to tbb, ocl loader and zlib, libxml2 the way
        # conda can detect, but we need to add them anyway to make it run.
        - tbb-devel {{ tbb_version_major }}.*
        # OpenCL loader is not in dependency of this package, but without it
        # the library is useless. Should user request OpenCL loader explicitly
        # in downstream recipes?
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # TODO: do we need zlib and libxml2 here?
        - zlib
        - libxml2
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
      run:
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://software.intel.com/content/www/us/en/develop/tools.html
      summary: Intel® CPU Runtime for OpenCL(TM) Applications
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-opencl-rt/info/licenses/license.txt
        - intel-opencl-rt/info/licenses/tpp.txt
      description: |
        Intel® CPU Runtime for OpenCL(TM) Applications
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      requires:
        - pyopencl
        - curl
      commands:
        - test -f $PREFIX/lib/intel-ocl-cpu/libintelocl.so          # [linux]
        - type %PREFIX%\Library\bin\intel-ocl-cpu\cl.cfg            # [win]
        - export OCL_ICD_DEBUG=7                                    # [linux]
        - curl -O https://raw.githubusercontent.com/inducer/pyopencl/v2021.2.13/examples/demo.py
        - export PYOPENCL_CTX=intel  # [unix]
        - set PYOPENCL_CTX=intel     # [win]
        - python demo.py

  - name: dpcpp-cpp-rt
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      skip: True  # [win32]
    requirements:
      host:
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-ur', exact=True) }}
        - {{ pin_subpackage('intel-opencl-rt', exact=True) }}
        - {{ pin_subpackage('intel-sycl-rt', exact=True) }}
      run:
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-ur', exact=True) }}
        - {{ pin_subpackage('intel-opencl-rt', exact=True) }}
        - {{ pin_subpackage('intel-sycl-rt', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top.html
      summary: Runtime for Intel® oneAPI DPC++/C++ Compiler
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - dpcpp-cpp-rt/info/licenses/license.txt
        - dpcpp-cpp-rt/info/licenses/tpp.txt
      description: |
        Runtime for Intel® oneAPI DPC++/C++ Compiler.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 $PREFIX/lib/*  # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]

  - name: dpcpp_impl_{{ target_platform }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      skip: True  # [not (linux64 or win64)]
      binary_relocation: False
      ignore_run_exports_from:
        - {{ c_stdlib }}_{{ target_platform }}
      run_exports:
        # 1. strong so it gets added if this package is in the build requirement section.
        # 2. Pin to year for now, similar to MKL.
        strong:
          - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
          # TODO: this is CPU runtime, do we want to strongly link it?
          - {{ pin_subpackage('intel-opencl-rt', exact=True) }}
          - {{ pin_subpackage('intel-sycl-rt', exact=True) }}
          - {{ pin_compatible("libgcc-ng") }}     # [linux64]
          - {{ pin_compatible("libstdcxx-ng") }}  # [linux64] 
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - zlib
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        # TODO: this is CPU runtime, do we want to strongly link it?
        - {{ pin_subpackage('intel-opencl-rt', exact=True) }}
        - {{ pin_subpackage('intel-sycl-rt', exact=True) }}
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # FIXME due to a conda-build bug, we need to tell conda-build that dpcpp-cpp-rt depends
        # on llvm openmp instead of gnu
        - _openmp_mutex * *_llvm   # [linux]
        - llvm-openmp              # [not linux]
      run:
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-sycl-rt', exact=True) }}
        # TODO: this is CPU runtime, do we want to strongly link it?
        - {{ pin_subpackage('intel-opencl-rt', exact=True) }}
        - binutils_impl_{{ target_platform }} >={{ binutils_version }}        # [linux]
        - libgcc-devel_{{ target_platform }} >={{ c_compiler_version }}       # [linux]
        - libstdcxx-devel_{{ target_platform }} >={{ cxx_compiler_version }}  # [linux]
        # None of the other compilers pin to sysroot, so we don't either. It
        # also appears that sysroot version must be aligned with host system,
        # e.g.:
        # https://github.com/conda-forge/ctng-compiler-activation-feedstock/issues/108
        - {{ c_stdlib }}_{{ target_platform }}  # [not linux]
        # We setting up minimal version for sysroot cause it is a requirement
        # of dpcpp compiler
        - {{ c_stdlib }}_{{ target_platform }} >={{ c_stdlib_version }}  # [linux]
      run_constrained:
        # prevent clobbering if user have mixed environment with intel's channel
        - compiler_shared <0a0
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top.html
      summary: Implementation for Intel® oneAPI DPC++/C++ Compiler
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - dpcpp_impl_{{ target_platform }}/info/licenses/license.txt  # [linux64 or win64]
        - dpcpp_impl_{{ target_platform }}/info/licenses/tpp.txt      # [linux64 or win64]
      description: |
        Implementation for Intel® oneAPI DPC++/C++ Compiler.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/bin/*         # [unix]
        - ls -A1 ${PREFIX}/include/*     # [unix]
        - ls -A1 ${PREFIX}/lib/*         # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]
        - dir %PREFIX%\Library\lib\*  # [win]
        - icx --version
        - icpx --version

  - name: ifx_impl_{{ target_platform }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      skip: True  # [not (linux64 or win64)]
      binary_relocation: False
      ignore_run_exports_from:
        - {{ c_stdlib }}_{{ target_platform }}
      run_exports:
        # 1. strong so it gets added if this package is in the build requirement section.
        # 2. Pin to year for now, similar to MKL.
        strong:
          - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
          - {{ pin_subpackage('intel-fortran-rt', exact=True) }}
          - {{ pin_compatible("libgcc-ng") }}     # [linux64]
          - {{ pin_compatible("libstdcxx-ng") }}  # [linux64] 
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - zlib
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-fortran-rt', exact=True) }}
        - _openmp_mutex * *_llvm   # [linux]
        - llvm-openmp              # [not linux]
      run:
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-fortran-rt', exact=True) }}
        - {{ pin_subpackage('intel-opencl-rt', exact=True) }}
        - binutils_impl_{{ target_platform }} >={{ binutils_version }}        # [linux]
        - libgcc-devel_{{ target_platform }} >={{ c_compiler_version }}       # [linux]
        - libstdcxx-devel_{{ target_platform }} >={{ cxx_compiler_version }}  # [linux]
        - gcc_{{ target_platform }} >={{ c_compiler_version }}                # [linux]
        - gxx_{{ target_platform }} >={{ c_compiler_version }}                # [linux]
        # None of the other compilers pin to sysroot, so we don't either. It
        # also appears that sysroot version must be aligned with host system,
        # e.g.:
        # https://github.com/conda-forge/ctng-compiler-activation-feedstock/issues/108
        - {{ c_stdlib }}_{{ target_platform }}  # [not linux]
        # We setting up minimal version for sysroot cause it is a requirement
        # of dpcpp compiler
        - {{ c_stdlib }}_{{ target_platform }} >={{ c_stdlib_version }}  # [linux]
      run_constrained:
        # prevent clobbering if user have mixed environment with intel's channel
        - compiler_shared <0a0
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/fortran-compiler.html
      dev_url: https://www.intel.com/content/www/us/en/docs/fortran-compiler/get-started-guide/2025-0/overview.html
      summary: Implementation for Intel® Fortran Compiler
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - ifx_impl_{{ target_platform }}/info/licenses/license.txt  # [linux64 or win64]
        - ifx_impl_{{ target_platform }}/info/licenses/tpp.txt      # [linux64 or win64]
      description: |
        Implementation for Intel® Fortran Compiler.
        This package is a repackaged set of binaries obtained directly from Intel channel.
    test:
      files:
        - simple.f90
      commands:
        - ls -A1 ${PREFIX}/bin/*         # [unix]
        - ls -A1 ${PREFIX}/include/*     # [unix]
        - ls -A1 ${PREFIX}/lib/*         # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]
        - dir %PREFIX%\Library\lib\*  # [win]
        - cat ${PREFIX}/bin/ifx.cfg  # [unix]
        - find ${PREFIX}  # [unix]
        - ifx --version  # [unix]
        - ifx simple.f90 -o simple.exe && simple.exe  # [win]

  - name: dpcpp_{{ target_platform }}
    script: install_activate.sh   # [unix]
    script: install_activate.bat  # [win]
    build:
      skip: True  # [not (linux64 or win64)]
      run_exports:
        # 1. strong so it gets added if this package is in the build requirement section.
        # 2. Pin to year for now, similar to MKL.
        strong:
          - {{ pin_subpackage("dpcpp-cpp-rt", max_pin="x") }}
    requirements:
      run:
        - {{ pin_subpackage('dpcpp_impl_' ~ target_platform, exact=True) }}
        - binutils_{{ target_platform }} >={{ binutils_version }}  # [linux]
        - {{ c_stdlib }}_{{ target_platform }}
        # We don't need actual compiler, we are just using activation script
        # from there. Ideally we need to create (d)activate-icpx(.sh|.bat) based
        # on gcc, the same way clang does it:
        # https://github.com/conda-forge/ctng-compiler-activation-feedstock/blob/9833f5976847c62d43f8058945ac9e5d440806c9/recipe/build.sh#L109-L126
        - gcc_{{ target_platform }} >={{ c_compiler_version }}  # [linux]
        - gxx_{{ target_platform }} >={{ c_compiler_version }}  # [linux]
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top.html
      summary: Implementation for Intel® oneAPI DPC++/C++ Compiler
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:                                                   # [linux64 or win64]
        - dpcpp_impl_{{ target_platform }}/info/licenses/license.txt  # [linux64 or win64]
        - dpcpp_impl_{{ target_platform }}/info/licenses/tpp.txt      # [linux64 or win64]
      description: |
        Activation for Intel® oneAPI DPC++/C++ Compiler.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      requires:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      files:
        - simple.cpp
      commands:
        - ls -A1 ${PREFIX}/bin/*         # [unix]
        - ls -A1 ${PREFIX}/include/*     # [unix]
        - ls -A1 ${PREFIX}/lib/*         # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]
        - dir %PREFIX%\Library\lib\*  # [win]
        - icpx -fsycl ${CXXFLAGS} simple.cpp ${LDFLAGS} -lpthread -o simple.exe  # [unix]
        - icpx -fsycl simple.cpp -I%PREFIX%\include -o simple.exe  # [win]

  - name: ifx_{{ target_platform }}
    script: install_activate.sh   # [unix]
    script: install_activate.bat  # [win]
    build:
      skip: True  # [not (linux64 or win64)]
    requirements:
      run:
        - {{ pin_subpackage('ifx_impl_' ~ target_platform, exact=True) }}
        - binutils_{{ target_platform }} >={{ binutils_version }}  # [linux]
        - {{ c_stdlib }}_{{ target_platform }}
        # We don't need actual compiler, we are just using activation script
        # from there. Ideally we need to create (d)activate-icpx(.sh|.bat) based
        # on gcc, the same way clang does it:
        # https://github.com/conda-forge/ctng-compiler-activation-feedstock/blob/9833f5976847c62d43f8058945ac9e5d440806c9/recipe/build.sh#L109-L126
        - gcc_{{ target_platform }} >={{ c_compiler_version }}  # [linux]
        - gxx_{{ target_platform }} >={{ c_compiler_version }}  # [linux]
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/fortran-compiler.html
      dev_url: https://www.intel.com/content/www/us/en/docs/fortran-compiler/get-started-guide/2025-0/overview.html
      summary: Implementation for Intel® Fortran Compiler
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:                                                   # [linux64 or win64]
        - ifx_impl_{{ target_platform }}/info/licenses/license.txt  # [linux64 or win64]
        - ifx_impl_{{ target_platform }}/info/licenses/tpp.txt      # [linux64 or win64]
      description: |
        Activation for Intel® Fortran Compiler.
        This package is a repackaged set of binaries obtained directly from Intel channel.
    test:
      requires:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      files:
        - simple.f90
      commands:
        - ls -A1 ${PREFIX}/bin/*         # [unix]
        - ls -A1 ${PREFIX}/include/*     # [unix]
        - ls -A1 ${PREFIX}/lib/*         # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]
        - dir %PREFIX%\Library\lib\*  # [win]
        - ifx ${FFLAGS} simple.f90 ${LDFLAGS} -o simple && ./simple  # [unix]
        - ifx simple.f90 -o simple.exe && simple.exe  # [win]

  - name: oneccl-devel
    version: {{ oneccl_version }}
    script: repack.sh   # [unix]
    build:
      number: {{ oneccl_build_number|int + dst_build_number|int }}
      skip: True  # [not linux64]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-sycl-rt', exact=True) }}
        # FIXME due to a conda-build bug, we need to tell conda-build that dpcpp-cpp-rt depends
        # on llvm openmp instead of gnu
        - _openmp_mutex * *_llvm   # [linux]
        - llvm-openmp              # [not linux]
      run:
        - {{ pin_subpackage('intel-sycl-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/oneccl.htm
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneccl-developer-guide-and-reference/top.html
      summary: Intel® oneAPI Collective Communications Library*
      license: LicenseRef-Proprietary-Intel-Simplified-Software-License
      license_family: Proprietary
      license_file:
        - oneccl-devel/info/licenses/license.txt
        - oneccl-devel/info/licenses/tpp.txt
      description: |
        Intel® oneAPI Collective Communications Library*.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 $PREFIX/lib/*  # [unix]

  - name: umf
    version: {{ umf_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ umf_build_number|int + dst_build_number|int }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
      host:
        - libhwloc
        # intel-cmplr-lic-rt is a license file, please do not remove.
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
      run:
        # intel-cmplr-lic-rt is a license file, please do not remove.
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
    about:
      home: https://github.com/oneapi-src/unified-memory-framework
      doc_url: https://oneapi-src.github.io/unified-memory-framework/
      dev_url: https://github.com/oneapi-src/unified-memory-framework
      summary: A library for constructing allocators and memory pools
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - umf/info/licenses/license.txt
        - umf/info/licenses/tpp.txt
      description: |
        The Unified Memory Framework (UMF) is a library for constructing
        allocators and memory pools. It also contains broadly useful
        abstractions and utilities for memory management. UMF allows users to
        manage multiple memory pools characterized by different attributes,
        allowing certain allocation types to be isolated from others and
        allocated using different hardware resources as required.
    test:
      commands:
        - ls -A1 ${PREFIX}/licensing/compiler/*  # [unix]
        - ls -A1 ${PREFIX}/lib/libumf.so*  # [unix]
        - dir %PREFIX%\licensing\compiler\*  # [win]

about:
  home: https://github.com/AnacondaRecipes/intel-compilers-repack-feedstock
  license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
  license_family: Proprietary
  summary: 'Repackaged Intel® compilers and runtimes.'

extra:
  recipe-maintainers:
    - ekomarova
    - napetrov
    - xaleryb
    - ZzEeKkAa
