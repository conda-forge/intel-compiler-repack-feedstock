Break the syntax!!!!
Intend to break this branch to prevent push to anaconda's servers.

{% set version = "2024.2.0" %}
{% set intel_build_number = "981" %}   # [linux]
{% set intel_build_number = "978" %}   # [win]

{% set oneccl_version = "2021.13.0" %}
{% set oneccl_build_number = "299" %}

{% set tbb_version = "2021.13.0" %}
{% set intel_ch = "https://software.repos.intel.com/intel-conda" %}

# use this if our build script changes and we need to increment beyond intel's version
{% set dst_build_number = '0' %}
{% set build_number = intel_build_number|int + dst_build_number|int %}

package:
  name: intel-compiler-repack
  version: {{ version }}

source:
  # Is there a better way to specify skipping the source if it does not exist? (so it matches 'skip: True' selectors)
  - url: {{ intel_ch }}/{{ target_platform }}/intel-cmplr-lic-rt-{{ version }}-intel_{{ intel_build_number }}.tar.bz2
    folder: intel-cmplr-lic-rt
    sha256: ab37ae3b142ea2cdd5bfed4389ea3299e66cc6da14e8751d8a609f970ae732ff  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/intel-cmplr-lib-rt-{{ version }}-intel_{{ intel_build_number }}.tar.bz2
    folder: intel-cmplr-lib-rt
    sha256: a9b1c6fa0547f2c28a5b1b560fd656859af30933259f1c2b3e30f1bec5d9b259  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/intel-cmplr-lib-ur-{{ version }}-intel_{{ intel_build_number }}.tar.bz2
    folder: intel-cmplr-lib-ur
    sha256: 7b39b7446b875408045a3b578ad467060db66be1c71dbbf25e1310c53a0857ea  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/intel-sycl-rt-{{ version }}-intel_{{ intel_build_number }}.tar.bz2
    folder: intel-sycl-rt
    sha256: 98a5503a47feb2e72b2fce045d7edc177c333828b5eee3dd337dfd7441c8c11a  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/intel-fortran-rt-{{ version }}-intel_{{ intel_build_number }}.tar.bz2
    folder: intel-fortran-rt
    sha256: f28118cd4029d708f35a8493473f9a24b20b9eb413007ff6fac93cb9f2d3643f  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/intel-opencl-rt-{{ version }}-intel_{{ intel_build_number }}.tar.bz2  # [linux64 or win64]
    folder: intel-opencl-rt  # [linux64 or win64]
    sha256: 1a33749a1696c0c0f2d572b76a98891c032e8e58354d6969036451f0848dff05  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/dpcpp-cpp-rt-{{ version }}-intel_{{ intel_build_number }}.tar.bz2  # [not win32]
    folder: dpcpp-cpp-rt  # [not win32]
    sha256: bb430763d0ee6029d6befa911605faf514ce83584933f64647c8fff527f5d136  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/dpcpp_impl_{{ target_platform }}-{{ version }}-intel_{{ intel_build_number }}.tar.bz2  # [linux64 or win64]
    folder: dpcpp_impl_{{ target_platform }}  # [linux64 or win64]
    sha256: 958dc668d49d2ae9dbe0f0e55f8f5025b3e280be0a5b294a3898bc6efbc74627  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/dpcpp_{{ target_platform }}-{{ version }}-intel_{{ intel_build_number }}.tar.bz2  # [linux64 or win64]
    folder: dpcpp_{{ target_platform }}  # [linux64 or win64]
    sha256: 7bfef6c455ae87a034e6efef1bbbbd7079875fcb4bdb3d5edbda950d1a1f0ee7  # [linux64]
  - url: {{ intel_ch }}/{{ target_platform }}/oneccl-devel-{{ oneccl_version }}-intel_{{ oneccl_build_number }}.tar.bz2  # [linux64]
    folder: oneccl-devel  # [linux64]
    sha256: 1734013a1238bff9eede84adb37290a0ef2d9a9d7057ab46bef95779089f2ab0  # [linux64]

build:
  number: {{ build_number }}
  binary_relocation: False
  detect_binary_files_with_prefix: False
  skip: True                                  # [not (linux64 or win)]

outputs:
  - name: intel-cmplr-lic-rt
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      run_exports:
        # Pin to year for now, similar to MKL.
        - {{ pin_subpackage("intel-cmplr-lic-rt", max_pin="x") }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      dev_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      summary: Intel End User License Agreement for Developer Tools
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-cmplr-lic-rt/info/licenses/license.txt
        - intel-cmplr-lic-rt/info/licenses/tpp.txt
      description: |
        Intel End User License Agreement for Developer Tools.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/licensing/compiler/*  # [unix]
        - dir %PREFIX%\licensing\compiler\*  # [win]

- name: intel-cmplr-lib-rt
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      run_exports:
        # Pin to year for now, similar to MKL.
        - {{ pin_subpackage("intel-cmplr-lib-rt", max_pin="x") }}
    requirements:
      # Since it is repack, we do not need these packages in the build and host
      # sections. However it is limitation of conda-build to check for library
      # linking only for the packages that are presented in build and host and
      # have run_export section.
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - zlib
      run:
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top.html
      summary: Runtime for Intel速 C++ Compiler Classic
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-cmplr-lib-rt/info/licenses/license.txt
        - intel-cmplr-lib-rt/info/licenses/tpp.txt
      description: |
        Runtime for Intel速 C++ Compiler Classic.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/lib/*  # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]

  - name: intel-cmplr-lib-ur
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      run_exports:
        # Pin to year for now, similar to MKL.
        - {{ pin_subpackage("intel-cmplr-lib-ur", max_pin="x") }}
      missing_dso_whitelist:
        - '**/libze_loader.so.1'
    requirements:
      # Since it is repack, we do not need these packages in the build and host
      # sections. However it is limitation of conda-build to check for library
      # linking only for the packages that are presented in build and host and
      # have run_export section.
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
      run:
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top.html
      summary: Runtime for Intel速 C++ Compiler Classic
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-cmplr-lib-ur/info/licenses/license.txt
        - intel-cmplr-lib-ur/info/licenses/tpp.txt
      description: |
        Runtime for Intel速 C++ Compiler Classic.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/lib/*  # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]
        - test -f ${PREFIX}/lib/libur_loader.so

  - name: intel-sycl-rt
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      run_exports:
        # Pin to year for now, similar to MKL.
        - {{ pin_subpackage("intel-sycl-rt", max_pin="x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - level-zero-devel
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-ur', exact=True) }}
      run:
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-ur', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      dev_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      summary: Intel End User License Agreement for Developer Tools
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-sycl-rt/info/licenses/license.txt
        - intel-sycl-rt/info/licenses/tpp.txt
      description: |
        Intel End User License Agreement for Developer Tools.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/licensing/compiler/*  # [unix]
        - dir %PREFIX%\licensing\compiler\*  # [win]

  - name: intel-fortran-rt
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      run_exports:
        # Pin to year for now, similar to MKL.
        - {{ pin_subpackage("intel-fortran-rt", max_pin="x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
        - patchelf                 # [linux]
      host:
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
      run:
        - _openmp_mutex * *_llvm   # [linux]
        - llvm-openmp              # [not linux]
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/fortran-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/fortran-compiler-oneapi-dev-guide-and-reference/top.html
      summary: Runtime for Intel速 Fortran Compiler Classic and Intel速 Fortran Compiler (Beta)
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-fortran-rt/info/licenses/license.txt
        - intel-fortran-rt/info/licenses/tpp.txt
      description: |
        Runtime for Intel速 Fortran Compiler Classic and Intel速 Fortran Compiler (Beta).
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/lib/*  # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]

  - name: intel-opencl-rt
    script: opencl-rt-build.sh   # [unix]
    script: opencl-rt-bld.bat  # [win]
    build:
      skip: True  # [win32]
      binary_relocation: False   # [win]
      ignore_run_exports:        # [win]
        - python_abi             # [win]
        - python                 # [win]
      run_exports:
        # Pin to year for now, similar to MKL.
        - {{ pin_subpackage("intel-opencl-rt", max_pin="x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
        - patchelf               # [linux]
      host:
        - tbb-devel {{ tbb_version.split('.')[0] }}.*
        # OpenCL loader is not in dependency of this package, but without it
        # the library is useless. Should user request OpenCL loader explicitly
        # in downstream recipes?
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # TODO: do we need zlib and libxml2 here?
        - zlib
        - libxml2
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - python  # [win]
      run:
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://software.intel.com/content/www/us/en/develop/tools.html
      summary: Intel速 CPU Runtime for OpenCL(TM) Applications
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - intel-opencl-rt/info/licenses/license.txt
        - intel-opencl-rt/info/licenses/tpp.txt
      description: |
        Intel速 CPU Runtime for OpenCL(TM) Applications
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      requires:
        - pyopencl
        - curl
      commands:
        - test -f $PREFIX/lib/intel-ocl-cpu/libintelocl.so          # [linux]
        - type %PREFIX%\Library\bin\intel-ocl-cpu\cl.cfg            # [win]
        - export OCL_ICD_DEBUG=7                                    # [linux]
        - curl -O https://raw.githubusercontent.com/inducer/pyopencl/v2021.2.13/examples/demo.py
        - export PYOPENCL_CTX=intel  # [unix]
        - set PYOPENCL_CTX=intel     # [win]
        - python demo.py

  - name: dpcpp-cpp-rt
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      skip: True  # [win32]
      missing_dso_whitelist:
        - '**/libze_loader.so.1'
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-opencl-rt', exact=True) }}
        - ocl-icd   # [linux]
        - khronos-opencl-icd-loader  # [win]
        # TODO: use level zero dependency only for linux?
        # - level-zero-devel
      run:
        - _openmp_mutex * *_llvm   # [linux]
        - llvm-openmp              # [not linux]
        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('intel-opencl-rt', exact=True) }}
        - {{ pin_subpackage('intel-sycl-rt', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top.html
      summary: Runtime for Intel速 oneAPI DPC++/C++ Compiler
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - dpcpp-cpp-rt/info/licenses/license.txt
        - dpcpp-cpp-rt/info/licenses/tpp.txt
      description: |
        Runtime for Intel速 oneAPI DPC++/C++ Compiler.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 $PREFIX/lib/*  # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]

  - name: dpcpp_impl_{{ target_platform }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      skip: True  # [not (linux64 or win64)]
      binary_relocation: False
      overlinking_ignore_patterns:
        - "**"
      ignore_run_exports_from:
        - {{ c_stdlib }}_{{ target_platform }}
      run_exports:
        # 1. strong so it gets added if this package is in the build requirement section.
        # 2. Pin to year for now, similar to MKL.
        strong:
          - {{ pin_subpackage("dpcpp-cpp-rt", max_pin="x") }}
          - {{ pin_compatible("libgcc-ng") }}     # [linux64]
          - {{ pin_compatible("libstdcxx-ng") }}  # [linux64] 
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - zlib
        - libxml2
        - ocl-icd                    # [linux]
        - khronos-opencl-icd-loader  # [not linux]
        - {{ pin_subpackage('dpcpp-cpp-rt', exact=True) }}
        # FIXME due to a conda-build bug, we need to tell conda-build that dpcpp-cpp-rt depends
        # on llvm openmp instead of gnu
        - _openmp_mutex * *_llvm   # [linux]
        - llvm-openmp              # [not linux]
      run:
        - {{ pin_subpackage('dpcpp-cpp-rt', exact=True) }}
        - binutils_impl_{{ target_platform }} >={{ binutils_version }}        # [linux]
        - libgcc-devel_{{ target_platform }} >={{ c_compiler_version }}       # [linux]
        - libstdcxx-devel_{{ target_platform }} >={{ cxx_compiler_version }}  # [linux]
        # None of the other compilers pin to sysroot, so we don't either. It
        # also appears that sysroot version must be aligned with host system,
        # e.g.:
        # https://github.com/conda-forge/ctng-compiler-activation-feedstock/issues/108
        - {{ c_stdlib }}_{{ target_platform }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top.html
      summary: Implementation for Intel速 oneAPI DPC++/C++ Compiler
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:
        - dpcpp_impl_{{ target_platform }}/info/licenses/license.txt  # [linux64 or win64]
        - dpcpp_impl_{{ target_platform }}/info/licenses/tpp.txt      # [linux64 or win64]
      description: |
        Implementation for Intel速 oneAPI DPC++/C++ Compiler.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 ${PREFIX}/bin/*         # [unix]
        - ls -A1 ${PREFIX}/include/*     # [unix]
        - ls -A1 ${PREFIX}/lib/*         # [unix]
        - test -f ${PREFIX}/include/sycl/CL/sycl.hpp # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]
        - dir %PREFIX%\Library\lib\*  # [win]
        - icx --version
        - icpx --version

  - name: dpcpp_{{ target_platform }}
    script: install_activate.sh   # [unix]
    script: install_activate.bat  # [win]
    build:
      skip: True  # [not (linux64 or win64)]
      run_exports:
        # 1. strong so it gets added if this package is in the build requirement section.
        # 2. Pin to year for now, similar to MKL.
        strong:
          - {{ pin_subpackage("dpcpp-cpp-rt", max_pin="x") }}
    requirements:
      run:
        - {{ pin_subpackage('dpcpp_impl_' ~ target_platform, exact=True) }}
        - binutils_{{ target_platform }} >={{ binutils_version }}  # [linux]
        - {{ c_stdlib }}_{{ target_platform }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top.html
      summary: Implementation for Intel速 oneAPI DPC++/C++ Compiler
      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
      license_family: Proprietary
      license_file:                                                   # [linux64 or win64]
        - dpcpp_impl_{{ target_platform }}/info/licenses/license.txt  # [linux64 or win64]
        - dpcpp_impl_{{ target_platform }}/info/licenses/tpp.txt      # [linux64 or win64]
      description: |
        Activation for Intel速 oneAPI DPC++/C++ Compiler.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      requires:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      files:
        - simple.cpp
      commands:
        - ls -A1 ${PREFIX}/bin/*         # [unix]
        - ls -A1 ${PREFIX}/include/*     # [unix]
        - ls -A1 ${PREFIX}/lib/*         # [unix]
        - dir %PREFIX%\Library\bin\*  # [win]
        - dir %PREFIX%\Library\lib\*  # [win]
        - icpx -fsycl ${CXXFLAGS} simple.cpp ${LDFLAGS} -lpthread -o simple.exe  # [unix]
        - icpx -fsycl simple.cpp -I%PREFIX%\include -o simple.exe  # [win]

  - name: oneccl-devel
    version: {{ oneccl_version }}
    script: repack.sh   # [unix]
    build:
      number: {{ oneccl_build_number|int + dst_build_number|int }}
      skip: True  # [not linux64]
      missing_dso_whitelist:
        - '**/libfabric.so.1'
        - '**/libze_loader.so.1'
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - mpich                    # [linux]
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('dpcpp-cpp-rt', exact=True) }}
        # FIXME due to a conda-build bug, we need to tell conda-build that dpcpp-cpp-rt depends
        # on llvm openmp instead of gnu
        - _openmp_mutex * *_llvm   # [linux]
        - llvm-openmp              # [not linux]
      run:
        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_subpackage('dpcpp-cpp-rt', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/oneccl.htm
      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneccl-developer-guide-and-reference/top.html
      summary: Intel速 oneAPI Collective Communications Library*
      license: LicenseRef-Proprietary-Intel-Simplified-Software-License
      license_family: Proprietary
      license_file:
        - oneccl-devel/info/licenses/license.txt
        - oneccl-devel/info/licenses/tpp.txt
      description: |
        Intel速 oneAPI Collective Communications Library*.
        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.
    test:
      commands:
        - ls -A1 $PREFIX/lib/*  # [unix]

about:
  home: https://github.com/AnacondaRecipes/intel-compilers-repack-feedstock
  license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools
  license_family: Proprietary
  summary: 'Repackaged Intel速 compilers and runtimes.'

extra:
  recipe-maintainers:
    - napetrov
    - tomashek
    - oleksandr-pavlyk
    - ZzEeKkAa
